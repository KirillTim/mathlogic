package propositional

import propositional.ExprTypes._
import scala.collection.{mutable => m}

object Proofs {

  def contraposition(a: Expr, b: Expr) = List[Expr](
    (!!(b) ->: (a ->: !!(b))) ->: ((!!(b) ->: ((a ->: !!(b)) ->: !!(a))) ->: (!!(b) ->: !!(a))),
    ((!!(b) ->: (a ->: !!(b))) ->: ((!!(b) ->: ((a ->: !!(b)) ->: !!(a))) ->: (!!(b) ->: !!(a)))) ->: ((a ->: b) ->: ((!!(b) ->: (a ->: !!(b))) ->: ((!!(b) ->: ((a ->: !!(b)) ->: !!(a))) ->: (!!(b) ->: !!(a))))),
    (a ->: b) ->: ((!!(b) ->: (a ->: !!(b))) ->: ((!!(b) ->: ((a ->: !!(b)) ->: !!(a))) ->: (!!(b) ->: !!(a)))),
    !!(b) ->: (a ->: !!(b)),
    (!!(b) ->: (a ->: !!(b))) ->: ((a ->: b) ->: (!!(b) ->: (a ->: !!(b)))),
    (a ->: b) ->: (!!(b) ->: (a ->: !!(b))),
    ((a ->: b) ->: (!!(b) ->: (a ->: !!(b)))) ->: (((a ->: b) ->: ((!!(b) ->: (a ->: !!(b))) ->: ((!!(b) ->: ((a ->: !!(b)) ->: !!(a))) ->: (!!(b) ->: !!(a))))) ->: ((a ->: b) ->: ((!!(b) ->: ((a ->: !!(b)) ->: !!(a))) ->: (!!(b) ->: !!(a))))),
    ((a ->: b) ->: ((!!(b) ->: (a ->: !!(b))) ->: ((!!(b) ->: ((a ->: !!(b)) ->: !!(a))) ->: (!!(b) ->: !!(a))))) ->: ((a ->: b) ->: ((!!(b) ->: ((a ->: !!(b)) ->: !!(a))) ->: (!!(b) ->: !!(a)))),
    (a ->: b) ->: ((!!(b) ->: ((a ->: !!(b)) ->: !!(a))) ->: (!!(b) ->: !!(a))),
    (!!(b) ->: (a ->: b)) ->: ((!!(b) ->: ((a ->: b) ->: ((a ->: !!(b)) ->: !!(a)))) ->: (!!(b) ->: ((a ->: !!(b)) ->: !!(a)))),
    ((!!(b) ->: (a ->: b)) ->: ((!!(b) ->: ((a ->: b) ->: ((a ->: !!(b)) ->: !!(a)))) ->: (!!(b) ->: ((a ->: !!(b)) ->: !!(a))))) ->: ((a ->: b) ->: ((!!(b) ->: (a ->: b)) ->: ((!!(b) ->: ((a ->: b) ->: ((a ->: !!(b)) ->: !!(a)))) ->: (!!(b) ->: ((a ->: !!(b)) ->: !!(a)))))),
    (a ->: b) ->: ((!!(b) ->: (a ->: b)) ->: ((!!(b) ->: ((a ->: b) ->: ((a ->: !!(b)) ->: !!(a)))) ->: (!!(b) ->: ((a ->: !!(b)) ->: !!(a))))),
    (a ->: b) ->: (!!(b) ->: (a ->: b)),
    ((a ->: b) ->: (!!(b) ->: (a ->: b))) ->: (((a ->: b) ->: ((!!(b) ->: (a ->: b)) ->: ((!!(b) ->: ((a ->: b) ->: ((a ->: !!(b)) ->: !!(a)))) ->: (!!(b) ->: ((a ->: !!(b)) ->: !!(a)))))) ->: ((a ->: b) ->: ((!!(b) ->: ((a ->: b) ->: ((a ->: !!(b)) ->: !!(a)))) ->: (!!(b) ->: ((a ->: !!(b)) ->: !!(a)))))),
    ((a ->: b) ->: ((!!(b) ->: (a ->: b)) ->: ((!!(b) ->: ((a ->: b) ->: ((a ->: !!(b)) ->: !!(a)))) ->: (!!(b) ->: ((a ->: !!(b)) ->: !!(a)))))) ->: ((a ->: b) ->: ((!!(b) ->: ((a ->: b) ->: ((a ->: !!(b)) ->: !!(a)))) ->: (!!(b) ->: ((a ->: !!(b)) ->: !!(a))))),
    (a ->: b) ->: ((!!(b) ->: ((a ->: b) ->: ((a ->: !!(b)) ->: !!(a)))) ->: (!!(b) ->: ((a ->: !!(b)) ->: !!(a)))),
    ((a ->: b) ->: ((a ->: !!(b)) ->: !!(a))) ->: (!!(b) ->: ((a ->: b) ->: ((a ->: !!(b)) ->: !!(a)))),
    (((a ->: b) ->: ((a ->: !!(b)) ->: !!(a))) ->: (!!(b) ->: ((a ->: b) ->: ((a ->: !!(b)) ->: !!(a))))) ->: ((a ->: b) ->: (((a ->: b) ->: ((a ->: !!(b)) ->: !!(a))) ->: (!!(b) ->: ((a ->: b) ->: ((a ->: !!(b)) ->: !!(a)))))),
    (a ->: b) ->: (((a ->: b) ->: ((a ->: !!(b)) ->: !!(a))) ->: (!!(b) ->: ((a ->: b) ->: ((a ->: !!(b)) ->: !!(a))))),
    (a ->: b) ->: ((a ->: !!(b)) ->: !!(a)),
    ((a ->: b) ->: ((a ->: !!(b)) ->: !!(a))) ->: ((a ->: b) ->: ((a ->: b) ->: ((a ->: !!(b)) ->: !!(a)))),
    (a ->: b) ->: ((a ->: b) ->: ((a ->: !!(b)) ->: !!(a))),
    ((a ->: b) ->: ((a ->: b) ->: ((a ->: !!(b)) ->: !!(a)))) ->: (((a ->: b) ->: (((a ->: b) ->: ((a ->: !!(b)) ->: !!(a))) ->: (!!(b) ->: ((a ->: b) ->: ((a ->: !!(b)) ->: !!(a)))))) ->: ((a ->: b) ->: (!!(b) ->: ((a ->: b) ->: ((a ->: !!(b)) ->: !!(a)))))),
    ((a ->: b) ->: (((a ->: b) ->: ((a ->: !!(b)) ->: !!(a))) ->: (!!(b) ->: ((a ->: b) ->: ((a ->: !!(b)) ->: !!(a)))))) ->: ((a ->: b) ->: (!!(b) ->: ((a ->: b) ->: ((a ->: !!(b)) ->: !!(a))))),
    (a ->: b) ->: (!!(b) ->: ((a ->: b) ->: ((a ->: !!(b)) ->: !!(a)))),
    ((a ->: b) ->: (!!(b) ->: ((a ->: b) ->: ((a ->: !!(b)) ->: !!(a))))) ->: (((a ->: b) ->: ((!!(b) ->: ((a ->: b) ->: ((a ->: !!(b)) ->: !!(a)))) ->: (!!(b) ->: ((a ->: !!(b)) ->: !!(a))))) ->: ((a ->: b) ->: (!!(b) ->: ((a ->: !!(b)) ->: !!(a))))), ((a ->: b) ->: ((!!(b) ->: ((a ->: b) ->: ((a ->: !!(b)) ->: !!(a)))) ->: (!!(b) ->: ((a ->: !!(b)) ->: !!(a))))) ->: ((a ->: b) ->: (!!(b) ->: ((a ->: !!(b)) ->: !!(a)))),
    (a ->: b) ->: (!!(b) ->: ((a ->: !!(b)) ->: !!(a))),
    ((a ->: b) ->: (!!(b) ->: ((a ->: !!(b)) ->: !!(a)))) ->: (((a ->: b) ->: ((!!(b) ->: ((a ->: !!(b)) ->: !!(a))) ->: (!!(b) ->: !!(a)))) ->: ((a ->: b) ->: (!!(b) ->: !!(a)))),
    ((a ->: b) ->: ((!!(b) ->: ((a ->: !!(b)) ->: !!(a))) ->: (!!(b) ->: !!(a)))) ->: ((a ->: b) ->: (!!(b) ->: !!(a))),
    (a ->: b) ->: (!!(b) ->: !!(a))
  )

  def tertiumNonDatur(e: Expr) =
    List[Expr](e ->: (e V !!(e))) ++
      contraposition(e, e V !!(e)) ++
      List[Expr](!!(e V !!(e)) ->: !!(e)) ++
      List[Expr](!!(e) ->: (e V !!(e))) ++
      contraposition(!!(e), e V !!(e)) ++
      List[Expr](!!(e V !!(e)) ->: !!(!!(e))) ++
      List[Expr](
        (!!(e V !!(e)) ->: !!(e)) ->: ((!!(e V !!(e)) ->: !!(!!(e))) ->: !!(!!(e V !!(e)))),
        (!!(e V !!(e)) ->: !!(!!(e))) ->: !!(!!(e V !!(e))),
        !!(!!(e V !!(e))),
        !!(!!(e V !!(e))) ->: (e V !!(e)),
        e V !!(e)
      )

  // And
  def andFF(a: Expr, b: Expr) =
    List(
      ((a & b) ->: a) ->: (((a & b) ->: !!(a)) ->: !!(a & b)),
      (a & b) ->: a,
      ((a & b) ->: !!(a)) ->: !!(a & b),
      !!(a) ->: ((a & b) ->: !!(a)),
      !!(a),
      (a & b) ->: !!(a),
      !!(a & b)
    )

  def andFT(a: Expr, b: Expr) =
    List(
      ((a & b) ->: a) ->: (((a & b) ->: !!(a)) ->: !!(a & b)),
      (a & b) ->: a,
      ((a & b) ->: !!(a)) ->: !!(a & b),
      !!(a) ->: ((a & b) ->: !!(a)),
      !!(a),
      (a & b) ->: !!(a),
      !!(a & b)
    )

  def andTF(a: Expr, b: Expr) =
    List(
      ((a & b) ->: b) ->: (((a & b) ->: !!(b)) ->: !!(a & b)),
      (a & b) ->: b,
      ((a & b) ->: !!(b)) ->: !!(a & b),
      !!(b) ->: ((a & b) ->: !!(b)),
      !!(b),
      (a & b) ->: !!(b),
      !!(a & b)
    )

  def andTT(a: Expr, b: Expr) =
    List(
      a ->: (b ->: (a & b)),
      a,
      b,
      b ->: (a & b),
      a & b
    )

  // Or
  def orFF(a: Expr, b: Expr) =
    List(
      a ->: (a ->: a),
      (a ->: (a ->: a)) ->: ((a ->: ((a ->: a) ->: a)) ->: (a ->: a)),
      (a ->: ((a ->: a) ->: a)) ->: (a ->: a),
      a ->: ((a ->: a) ->: a),
      a ->: a,
      ((!!(a) & !!(b)) ->: a) ->: (((!!(a) & !!(b)) ->: !!(a)) ->: !!(!!(a) & !!(b))),
      (((!!(a) & !!(b)) ->: a) ->: (((!!(a) & !!(b)) ->: !!(a)) ->: !!(!!(a) & !!(b)))) ->: (a ->: (((!!(a) & !!(b)) ->: a) ->: (((!!(a) & !!(b)) ->: !!(a)) ->: !!(!!(a) & !!(b))))),
      a ->: (((!!(a) & !!(b)) ->: a) ->: (((!!(a) & !!(b)) ->: !!(a)) ->: !!(!!(a) & !!(b)))),
      a ->: ((!!(a) & !!(b)) ->: a),
      (a ->: ((!!(a) & !!(b)) ->: a)) ->: (a ->: (a ->: ((!!(a) & !!(b)) ->: a))),
      a ->: (a ->: ((!!(a) & !!(b)) ->: a)),
      (a ->: a) ->: ((a ->: (a ->: ((!!(a) & !!(b)) ->: a))) ->: (a ->: ((!!(a) & !!(b)) ->: a))),
      (a ->: (a ->: ((!!(a) & !!(b)) ->: a))) ->: (a ->: ((!!(a) & !!(b)) ->: a)),
      a ->: ((!!(a) & !!(b)) ->: a),
      (a ->: ((!!(a) & !!(b)) ->: a)) ->: ((a ->: (((!!(a) & !!(b)) ->: a) ->: (((!!(a) & !!(b)) ->: !!(a)) ->: !!(!!(a) & !!(b))))) ->: (a ->: (((!!(a) & !!(b)) ->: !!(a)) ->: !!(!!(a) & !!(b))))),
      (a ->: (((!!(a) & !!(b)) ->: a) ->: (((!!(a) & !!(b)) ->: !!(a)) ->: !!(!!(a) & !!(b))))) ->: (a ->: (((!!(a) & !!(b)) ->: !!(a)) ->: !!(!!(a) & !!(b)))),
      a ->: (((!!(a) & !!(b)) ->: !!(a)) ->: !!(!!(a) & !!(b))),
      (!!(a) & !!(b)) ->: !!(a),
      ((!!(a) & !!(b)) ->: !!(a)) ->: (a ->: ((!!(a) & !!(b)) ->: !!(a))),
      a ->: ((!!(a) & !!(b)) ->: !!(a)),
      (a ->: ((!!(a) & !!(b)) ->: !!(a))) ->: ((a ->: (((!!(a) & !!(b)) ->: !!(a)) ->: !!(!!(a) & !!(b)))) ->: (a ->: !!(!!(a) & !!(b)))),
      (a ->: (((!!(a) & !!(b)) ->: !!(a)) ->: !!(!!(a) & !!(b)))) ->: (a ->: !!(!!(a) & !!(b))),
      a ->: !!(!!(a) & !!(b)),
      b ->: (b ->: b),
      (b ->: (b ->: b)) ->: ((b ->: ((b ->: b) ->: b)) ->: (b ->: b)),
      (b ->: ((b ->: b) ->: b)) ->: (b ->: b),
      b ->: ((b ->: b) ->: b),
      b ->: b,
      ((!!(a) & !!(b)) ->: b) ->: (((!!(a) & !!(b)) ->: !!(b)) ->: !!(!!(a) & !!(b))),
      (((!!(a) & !!(b)) ->: b) ->: (((!!(a) & !!(b)) ->: !!(b)) ->: !!(!!(a) & !!(b)))) ->: (b ->: (((!!(a) & !!(b)) ->: b) ->: (((!!(a) & !!(b)) ->: !!(b)) ->: !!(!!(a) & !!(b))))),
      b ->: (((!!(a) & !!(b)) ->: b) ->: (((!!(a) & !!(b)) ->: !!(b)) ->: !!(!!(a) & !!(b)))),
      b ->: ((!!(a) & !!(b)) ->: b),
      (b ->: ((!!(a) & !!(b)) ->: b)) ->: (b ->: (b ->: ((!!(a) & !!(b)) ->: b))),
      b ->: (b ->: ((!!(a) & !!(b)) ->: b)),
      (b ->: b) ->: ((b ->: (b ->: ((!!(a) & !!(b)) ->: b))) ->: (b ->: ((!!(a) & !!(b)) ->: b))),
      (b ->: (b ->: ((!!(a) & !!(b)) ->: b))) ->: (b ->: ((!!(a) & !!(b)) ->: b)),
      b ->: ((!!(a) & !!(b)) ->: b),
      (b ->: ((!!(a) & !!(b)) ->: b)) ->: ((b ->: (((!!(a) & !!(b)) ->: b) ->: (((!!(a) & !!(b)) ->: !!(b)) ->: !!(!!(a) & !!(b))))) ->: (b ->: (((!!(a) & !!(b)) ->: !!(b)) ->: !!(!!(a) & !!(b))))),
      (b ->: (((!!(a) & !!(b)) ->: b) ->: (((!!(a) & !!(b)) ->: !!(b)) ->: !!(!!(a) & !!(b))))) ->: (b ->: (((!!(a) & !!(b)) ->: !!(b)) ->: !!(!!(a) & !!(b)))),
      b ->: (((!!(a) & !!(b)) ->: !!(b)) ->: !!(!!(a) & !!(b))),
      (!!(a) & !!(b)) ->: !!(b),
      ((!!(a) & !!(b)) ->: !!(b)) ->: (b ->: ((!!(a) & !!(b)) ->: !!(b))),
      b ->: ((!!(a) & !!(b)) ->: !!(b)),
      (b ->: ((!!(a) & !!(b)) ->: !!(b))) ->: ((b ->: (((!!(a) & !!(b)) ->: !!(b)) ->: !!(!!(a) & !!(b)))) ->: (b ->: !!(!!(a) & !!(b)))),
      (b ->: (((!!(a) & !!(b)) ->: !!(b)) ->: !!(!!(a) & !!(b)))) ->: (b ->: !!(!!(a) & !!(b))),
      b ->: !!(!!(a) & !!(b)),
      (a ->: !!(!!(a) & !!(b))) ->: ((b ->: !!(!!(a) & !!(b))) ->: ((a V b) ->: !!(!!(a) & !!(b)))),
      (b ->: !!(!!(a) & !!(b))) ->: ((a V b) ->: !!(!!(a) & !!(b))),
      (a V b) ->: !!(!!(a) & !!(b)),
      !!(a) ->: (!!(b) ->: (!!(a) & !!(b))),
      !!(b) ->: (!!(a) & !!(b)),
      !!(a) & !!(b),
      (!!(a) & !!(b)) ->: ((a V b) ->: (!!(a) & !!(b))),
      (a V b) ->: (!!(a) & !!(b)),
      ((a V b) ->: (!!(a) & !!(b))) ->: (((a V b) ->: !!(!!(a) & !!(b))) ->: !!(a V b)),
      ((a V b) ->: !!(!!(a) & !!(b))) ->: !!(a V b),
      !!(a V b)
    )

  def orFT(a: Expr, b: Expr) =
    List(
      b ->: (a V b),
      b,
      a V b
    )

  def orTF(a: Expr, b: Expr) =
    List(
      a ->: (a V b),
      a,
      a V b
    )

  def orTT(a: Expr, b: Expr) =
    List(
      a ->: (a V b),
      a,
      a V b
    )

  // Impl
  def implFF(a: Expr, b: Expr) =
    List()

  def implFT(a: Expr, b: Expr) =
    List()

  def implTF(a: Expr, b: Expr) =
    List()

  def implTT(a: Expr, b: Expr) =
    List()

  // Not
  def notT(a: Expr) =
    List(
      (!!(a) ->: a) ->: ((!!(a) ->: !!(a)) ->: !!(!!(a))),
      a ->: (!!(a) ->: a),
      a,
      !!(a) ->: a,
      (!!(a) ->: !!(a)) ->: !!(!!(a)),
      !!(a) ->: (!!(a) ->: !!(a)),
      (!!(a) ->: (!!(a) ->: !!(a))) ->: ((!!(a) ->: ((!!(a) ->: !!(a)) ->: !!(a))) ->: (!!(a) ->: !!(a))),
      (!!(a) ->: ((!!(a) ->: !!(a)) ->: !!(a))) ->: (!!(a) ->: !!(a)),
      !!(a) ->: ((!!(a) ->: !!(a)) ->: !!(a)),
      !!(a) ->: !!(a),
      !!(!!(a))
    )

  def notF(a: Expr) =
    List(
      !!(!!(a))
    )


  var actions = Map[(String, Boolean, Boolean), Function2[Expr, Expr, List[Expr]]]()
  //actions += (("And",true,true) -> andTT)

  def buildProof(e: Expr, values: Map[String, Boolean]): m.MutableList[Expr] = {
    var rv = m.MutableList[Expr]()
    e match {
      case a & b =>
        val l = a.evaluate(values)
        val r = b.evaluate(values)
        rv ++= buildProof(a, values)
        rv ++= buildProof(b, values)
        (l, r) match {
          case (true, true) =>
            rv ++= andTT(a, b)
          case (true, false) =>
            rv ++= andTF(a, b)
          case (false, true) =>
            rv ++= andFT(a, b)
          case (false, false) =>
            rv ++= andFF(a, b)
        }
      case a V b =>
        val l = a.evaluate(values)
        val r = b.evaluate(values)
        rv ++= buildProof(a, values)
        rv ++= buildProof(b, values)
        (l, r) match {
          case (true, true) =>
            rv ++= orTT(a, b)
          case (true, false) =>
            rv ++= orTF(a, b)
          case (false, true) =>
            rv ++= orFT(a, b)
          case (false, false) =>
            rv ++= orFF(a, b)
        }
      case a -> b =>
        val l = a.evaluate(values)
        val r = b.evaluate(values)
        rv ++= buildProof(a, values)
        rv ++= buildProof(b, values)
        (l, r) match {
          case (true, true) =>
            rv ++= implTT(a, b)
          case (true, false) =>
            rv ++= implTF(a, b)
          case (false, true) =>
            rv ++= implFT(a, b)
          case (false, false) =>
            rv ++= implFF(a, b)
        }
      case !!(a) =>
        rv ++= buildProof(a, values)
        if (a.evaluate(values))
          rv ++= notT(a)
        else
          rv ++= notF(a)
      case _ => //nothing
    }
    rv
  }
}
